Charts are used to graphical representation of data. There are many types of charts, most popular are:
*linear_plot* [punktowy] point_geom = ggplto(mtcars, aes(x = wt, y =mpg)) + geom_point()

aes() = aesthetic mappings of a plot.

*linear chart* ggplot(mtcars, aes(x=wt, y=mpg)) + geom_line();		

*bar graph* [słupkowy]  ggplot(mtcars, aes(x=factor(cyl))) + geom_bar();

*pie chart* [kołowy]: ggplot(mtcars, aes(x=factor(cyl))) + gemo_bar() + coord_polar(theta = "y");

*spread chart/scatterplot* [rozrzutu]: ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point();



The R envirnoment allows for the creation of btoh basic statistical charts and less common ones, such as:
- box and whisker (box plot)
- stem and leaf = (lodyga+ liscie)
- Quantile-quantile.
- violin plot(skrzypcowy).



Many commands for generating charts share commmon arguments, including: 
* height, width 
* col = specifies the color of char elmeents, (i.e., bars,  slices of a pie, etc.)
* main, sub = specifies the title and subtitle of the chart, 
* axes, axisnames = controls the dipslay and labeling of chart axes, default = TRUE.
* xlab, ylab = allows for the input of custom text descriptions for the x and y axes of the chart.
* add = allows for displaying the chart together with another previously generated chart, default: FALSE.



In the R environment ,there is a rich range of colors available. After calling the function colors(), you receive a list of 657 colors that are available. You can refer to a specific color by its name, such as 'cyan' ,or by its nubmer, for example : 68. When creatinga a chart you have the option to define the color palette of its comoponents (bars, slices of a pie) by setting the 'col' arguemtn of the corresponding chart-generating function. For Example: 
	* col = rainbow(5) = the elements of the chart will be alternately colored with five colors of the rainbow.
	* col = 45- all elements of the chart will be in a uniform shade of the color blue("cadetblue3").
	( col=c(93,2,"darkgrey") - the elements of the chart will be alternately colored with three specified colors.


CHART LEGEND:
Ading a legend to a chart in R is possible by calling the legend() function. The positioning of the legend on the chart can be achieved through the x (or x,y) argument, which contains coordinates or text such as "bottomright", 'bottom', 'bottomleft', 'left', 'topleft', 'top', 'topright', 'right', 'center'.

Additionally, it is possible to place the legend on the chart at a specified location using the locator(1) argument, which allows placing the legend otn the chart at a location indicated by the mouse.
_ Other important parameters include:
 = bty = sepcifies whether the leegend should be framed; possible values: "o" = frame(default) or "n" = no frame.
 = bg - if 'bty="o"', allows setting the background of the legend frrame.
 = cex - specifies the font size in the legend.
 = fill - allows displaying squares next to the description and assigning them selected coors, e.g., fill=rainbow(4).
 
Note: the legend() function should be called after RR displays the chart.



PLOT() FUNCTION.
The fundamental and most versatile(uniwersalna) function for geneerating plots in R is the plot() function. It can produce various results depending on the parameters provided.
_The most crucial (najwazniejszy) parameter of the plot() function is type, representing the type of plot. It can take on values such as:
	* "p" for scatterplot,
	* "l" for line plot,
	* "b" for a point-to-point line plot,
	* "s" for a step plot,
	* "S" for a step plot, reversed.
	* "h" for a histogram-like plot.	//kreskowy/histogramowy.
	
	

THE PLOT() FUNCTION -EXAMPLES OF STATISTICAL PLOTS.
' let's analyze the "mcycle" database included in the 'MASS' Package.
#load the MASS Library.
>library(MASS)	#it contains the measures of acceleration of head during a motorcycle crash...
#Single-dimensional scatter plot of time for each observaiton
>plot(mcycle$times);
#Two-diemnsional scatter plot DEPICTING[obrazujacy] the relationship between time and acceleration
>plot(,cycle$times, mcycle$accel);
#equivalent to the previous scatter plot using 'type' argument).
> plot(mcycle$times, mcycle$accel, type="p");
#Twodimensional LINE plot depicting the relationshi between time and acceleration:
> plot(mcycle$times, mcycle$accel, type="l");
#Two dimensional STEP plot DEPICTING the relationship betwwen time and acceleration:
> plot(mcycle$times, mcycle$accel, type="s");



THE PLOT() FUNCTION - plots of ARBITRARY[dowolny] FUNCTIONS>
_ the par(0 function, when called before the plot() function, allows for the specification of graphical parameters(). Commonly used arguments include: 
	* mfcol, mfrow = a vector specifying the number of rows and columns that detewrmine the array on which individual plots will be drawn.

Before generating additional plots, let's execute the command:
	par(mfcol = c(1,2))
The plot(0 function can also be used to generate plots of function for example
#{Plot of the cosine function over the range of [-2*pi, 2*pi] }
plot(cos, -2*pi, 2*pi);
#Plot of the tangent function over the range [-pi/3, pi/3];
plot(tan, -pi/3, pi/3);

It can also be utilized to create plots of distribution[dystrybuant] functtions and densities of known probability distributions.



BAR CHART !!!
The barplot() [słupkowy] function allows you to generate a vertical (by default) or horizontal bar chart.
Depending on the form of the main argument, the following types of bar charts are possible:
1. Illustrating the values of individual observations - one bar corresponds to one observation; the main argument is the name of the variable for which we want to illustrate the values of observations.
2. Illustrating groups of observations: - one bar corresponds to one category; the main argument is a contingency table (the result of the table() function) -> categorizing the variable for which we want to illustrate groups of observations.

It's also possible to create charts that are stacked/grouped based on another variable. In this case, the function's argument is a cross-tabulation for two variables.



BARPLOT() FUNCTION: ARGUMENTS//
Specific parameters for the barplot() function are:
 * horiz = horizontal placement of bars, default: FALSE,
 * beside= specifies the arrangement of bars in the case of division based on the categories of another variable. If beside=TRUE, the bars are grouped next to each other; if beside=FALSE (default), the bars are stacked on top of each other.



BAR CHART OF OBSERVATION VALUES: EXAMPLE ;/
The 'trees' database contains information about measurements of 31 fallen American ash trees. The following command allows you to generate a bar chart for the heights of individual trees:
> barplot(trees$Height, col=rainbow(31), main="Heights of American Ash Trees(in feet)")



xBAR CHART FOR OBESRVATION GROUPS;; EXAMPLE:
The file "survey_students_2011.csv" contains information about third-year computer science students from the Faculty of Mathematics and Computer Science, collected in the summer of 2011. The followin commands allow you to load the file and generate a bar chart for observation groups determined by the variable of "jobtitle" (preferences regarding the position that students would like to hold in the future):
> students <- read.csv("survey_students_2011.csv", header=TRUE, sep=";");
> attach(students);
> arg <- table(jobtitle);
> barplot(arg, col=rainbow(5), xlab="Preffered Position", ylab="Number of Students");
> legend("topleft", c("software tester", "technical support specialist", "programmer", "network systems specialist", "system designer"), cex=1, bty="n", fill=rainbow(5));




GROUPED BAR CHART: EXAMPLE//
We can illustrate the number of students preferring specific positions, grouped based on whether the student watches TV series or not.
> arg <- table(jobtitle, series);
> barplot(arg, col=rainbow(5), beside=T, xlab="Watching TV series(1) or not(0)", ylab="Number of students");
> legend("topleft", c("software tester", "technical support specialist", "programmer", "network systems specialist", "system designer"), cex=1, bty="n", fill=rainbow(5));



GROUPED BAR CHART: /V2// EXAMPLE:
Once again, we will illustrate the number of students preferring specific postitions, but this time grouped based on whether the student watches TV series or not. We will also switch the variables in the table() function: 
> arg <- table(series, jobtitle);
> barplot(arg, col=rainbow(2), xlab="Positions")
> legend(locator(1), c("Doesn't watch series", "Watches series"), cex=1, bty="n", fill=rainbow(2))

Note: We specify the legend's position by clicking on the appropriate location on the chart with the mouse. 
As a result, we obtain a chart where the nubmering below the bars corresponds to the numbers of possible positions in the survey.



HISTOGRAM !!
A histogram is a special type of bar chart that allows for a visual represntaion of the distribution of a studied feature, which is appropriately categorized. There are as many bars as categories(classes), and they are always of the same width, spaced at equal intervals on the horizontal axis. The heights of the bars can correspond to the frequencies of individual classes or their relative frequencies (empirical probabilities).
	
	The hist() function allows for the generation of a histogram. Important parameters include:
* breaks: a parameter determining how to determine classes on the histogram. It can be one of the following arguments: 
	*a vector containing breakpoints, 
	*a number specifying the number of classes, 
	*the name of an algorithm that calculates the number of classes, 
	*or a function computing the number of classes. 
 By default, this parameter is set to "Sturges"
* freq: the vertical axis represents the frequencies of indiviudal classes (default is TRUE).
* prob: the vertical axis represents relative frequencies (empirical probabilities) for individual classes (default is FALSE).


HISTOGRAM _ EXAPMLE"/
The boot package includes, among other things, the urine database. We can generate a histogram for the variable :ph: from this database as follows:
> library(boot);
> hist(urine$ph, main="Histogram PH", col=rainbow(20));



STEM-AND-LEAF PLOT:	[lodyga-liscie]
The stem() function allows for the generation of a stem-and-leaf plot. This is a textual plot illustrating the values of a variable. Important parameters include:
* scale: specifies the scale of the plot( default is 1).
* width: specifies the width of the plot( default is 80).
 Example:
> a = c(1.2, 2.4, 3.4, 4.4, 4.5, 5.4, 5.5, 5.5, 6.3, 6.4);
> stem(a);
> stem(a, scale=2);
# Compare the results of the last two commands.



PIE CHART:! [kolowy]
A pie chart allows for comparing the proportions of individual fractions in relation to the whole. It's a very popular type of char with a history of over two centuries. 
_ The pie() function enables the generation of a pie chart. Similar to the bar chart, the main argument can be either a variable (in which case the slices of the pie will correspond to the values of individual observations) or a "frequency distribution"[szereg rozdzielczy], i.e., the result of the table() function [in which case the slices of the pie will correspond to categories determined by the variable].

Note: If the goal is to compare the proprtions of fractions with each other, a bar chart may be more appropriate. Additionally, a pie chart is not suitable for presenting uncategorized data ( when almost every observation has a different value)



PIE CHART -. EXAMPLE;
For instance.: we will visualize the measurement time (in days) of a certain "Sitka SPRUCE(świerk) variety" on a pie chart (using the MASS package, + "Time" variable in the sitka database).
 > time <- Sitka$Time;
 > time_table <- table(time);
 > pie(time_table, col=c("green", "red", "orange", "blue", "yellow"));
At first glance, it seems that the slices of the pie chart are equal. Are they really? If we want to compare the frequencies of measurements, a better result in this case can be obtained with a bar chart:
> barplot(time_table);
// CONCLUSION: The slices of the pe are indeed equal.



BOX PLOT[SKRZYNKOWY]:
A box plot, also known as a "box-and-whisker plot", allows for the presentation of parameters of the location and spread of the distribution of the studied feature[cecha]. It consists of a box and "whiskers". The lower part of the box is drawn at the height of the lower quartile(Q1 = quantile(0.25)), the upper part at the height of the upper quartile (Q3 = quantile(0.75)), and the line in the middle corresponds to the median(Q2 = Med). The heigh of the box equals the interqurtile range (IQR = Q3 - Q1).

The lengths of the whiskers may vary depending on whether we conside outliers (extreme, suspiciously small or large observartions) or not. A box plot excluding outliers looks like....
 > barplot(time_table);



BOX PLOT- PARAMETERS + EXAMPLE:
The boxplot() function allows for generating a box plot. Important parameters of the function include:
 * range: specifies the range of whisker lengths. A positive value for range (default is 1.5) multiplied by the IQR determines the limit of whisker lengths. A value of 0 generates a box plot without considering outliers.
 * horizontal: a logical value determining whether the plot should be oriented horizontally (default is FALSE).
EXAMPLE;
> x <- c(1, -3, -1, 2, 4, 6, 7, 9, 12, 15, 25, 30, -16);
> summary(x);
> boxplot(x);
> boxplot(x, range=0);