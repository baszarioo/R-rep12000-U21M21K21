>read.csv("C:\\home\\...)
||
>df <- read.csv("C:\\home\\...)
>View(df)
>help("read.csv")

>df <- read.csv("C:\\home\\..., header = FALSE)  # new header creatione.

Schulübung1: [Esercizi scolastico1]
Display first 6 rows from read dataFrame: [ESPORRE PRIMI SIEI RIGHE DALLA TABELLA DI LETTURA]: 
> head(df, n=6)
ESERCIZI 2:
Display only the column that contains the weight: [VISUAIZZA SOLO LA COLONNA DEL PESO]:
> weight_column <- df$Peso
> print(weight_column)
ESERCIZI 3:
Determine/figure a BMI for every single kid and save data under the bmi variable/name[ DETERMINARE UN INDICE DI MASSA CORPOREA PER OGNI BAMBINI]:
> df$bmi <- df$Peso / (df$Altezza^2)
> print(df)
|| if height is cm's [ SE L'ALTEZZA È IN CENTIMETRI ]:
> df$height_meters <- df$Altezza / 100
> df$bmi <- df$weight / (df$height_meters^2)
#Remove the 'height_meters' column if you no longer need it
> df <- df[, !(names(df) %in% c("height_meters"))]
> print(df)
ESERCIZI4: Sort the bmi values in descending order: [ORDINA I VALORI DELL'IMC IN ORDINE DECRESCENTE]:
df <- df[order(df$bmi, decreasing=TRUE), ]
print(data)



Zad2:/Compito2: Install foreign package and get to know with read.spss function. Using it read example file of program IBM SPSS Statistics named: Employee data.sav. Get variable names from that file. 	[ INSTALLA IL PACCHETTO foreign E IMPARA A CONOSCERE CON LA FUNZIONE read.spss..  UTIIZZANDOLO LEGGERE IL FILE DI ESEMPIO DEL PROGRAMMA ibm spss statistics DENOMINATO: employee data.sav... OTTENERE I NOMI DELLE VARIABILI DE TALE FILE.]
> install.packages("foreign")
> library(foreign)
> file_path <- "employee data.sav"
> data <-read.spss(file_path, to.data.frame=TRUE)
> variable_names <- names(data)
> print(variable_names)

a) Create a variable earning_level, that accepts next proper values:	[salary=stipendio].
	- low, if salary takes values ranging from 0 to 25000 (including). //bassa-o
	- average, if salary takes values ranging from 25000 to 35000 (including). //media-o
	- high, if salary takes values higher than 35000 // alta-o
> data$earning_level <- ifelse(data$salary <= 25000, "low", ifelse(data$salary <= 35000, "average", "high"))
> print(data)

b) How much observations in respective[poszczególne] groups are defined by variable earning_level?
> earning_level_counts <- table(data$earning_level)
> print(earning_level_counts)

c) Write/Save a variable earning_level in a earnings.txt file.		[SCRIVERE/SALVARE UNA VARIABILE earning_level IN UN FILE .txt utili]
> write.table(data$earning_level, file = "earnings.txt", col.names=FALSE, row.names=FALSE)
# Confirm that the data has been saved: 	[CONFERMARE CHE I DATI SONO STATI SALVATI:]
> cat("The 'earning_level' variable has been saved to 'earnings.txt'\n")


Compito3: In R write a function, that takes an numeric data vector x and an integer k as an arguments, the function will return k' central moment of x vector accordantly to the formula: 
 Mk(x)=1/n Σn(i=1) (xi-śr(x))^k, whereas śr(x) stands for arithmetic average of x vertice.: 
> central_moment <- function(x,k) {
+ x_b <- mean(x)
+ n <- length(x)
+ mk <- sum((x-x_b)^k) / n
+ return(mk)
+ }

ex: 
> data_vector <- c(1,2,3,4,5)
> var <- central_moment(data_vector, 2)
> cat("2 val: ", variance, "\n")
> mom_3 <- central_moment(data_vector, 3)
> cat("3 val: ", mom_3, "\n") 
||
> central_moments <- function(x, order.max) {
	n <- length(x)
	mean_x <- mean(x)
	moments <- numeric(order.max)
	for (i in 1:order.max) {
		moments[i] <- sum((x - mean_x)^i)/n
	}
	return(moments)
}
# USAGE: 
> data_vector <- c(1,2,3,4,5)
> central_moments(data_vector, 3)