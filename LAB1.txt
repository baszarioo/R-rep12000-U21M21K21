*Polecenia R wpisuje sięw konsoli po znaku '>', np.
> 7 -4
*Komentarzse wpisuje się w konsoli po znaku '#', np.
> # to jest komentarz
*R jako kalkulator.
 - funkcje: +,-,*,/,^(potęga), exp(funkjca eksponencjalna), log (f. logarytmiczna), sqrt(pierwiastek kwadratowy), abs (wartosc bezwzgledna), itp.
 > log(16,4)
 > log(9, base=3)+sqrt(64)
 > exp(1)+0.25
 > abs(cos(pi))

Aby uruchmić poecenie / grupę poeceń znajdujące się w skrypcie, wybierz trzecią od lewej strony ikonkę znajdującą się pod menu:

* PAKIETY R * 
Pakiet = zbiór funkcji, plików danych i plików pomocy powiązanych ze sobą.
Podzas instalacji R instalowane są również standardowe pakiety.
Nie wszystkie są jednak ładowane domyślnie.
Te domyślnie załądowane można obejrzeć, wpisując w okno konsoli:
> getOpition("defaultPackages")
List aktualnie załadowanych pakietów: 
> (.packages())
istę wszystkich dostępnych pakietów, które są zainstalowane ( nie wszystkie załadowane).
> (.packages(all.available=TRUE))
bądź
> library()		# otwiera nam nowe okno z listą pakietów możliwych do załadowania.


* ŁADOWANIE PAKIETÓW W R *
1) obejrzeć podstawowe informacje na temat wybranego pakietu, można tak o:
> library(help="stats")
2) załadowanie pakietu do R, tak o: 
> library(grid)

tak instalujemy pakiecik: 
> install.packages("nazwa_pakietu")


* PRZYKŁADOWE ZBIORY DANYCH W R *
- wyświetlenie listy aktualnie dostępnych baz danych:
> data()
- wyświetlenie danych znajdujących się w wybranej bazie: 
> Orange
- sprawdzenie rozmiaru bazy danych, wywołaj funkcję dim():
> dim(Orange)
> dim(Orange)[1]  # liczba obserwacji
> dim(Orange)[2]  # liczba zmiennych.

Aby uzyskać nazwy zmiennych znajdujących się w bazie, wystarczy wywołać funkcję names():
> names(Orange)

* Podłączanie (odłączanie) bazy danych do R *
W bazie Orange są  zmienne: Tree, age, circumference(obwód). Aby dokonać ich analizę, najpierw podłączyć trzeba bazę do R:
> attach(Orange)
> Tree # teraz już mamy dostęp do zmiennej Tree.
Po skończonej pracy bazę należy odłączyć:
> detach(Orange)
> Tree # R nie rozpoznaje już obiektu Tree.

// Można analizować zmienne z bazy bez podłączania jej - wystarczy odwoływać się do nich poprzez nazwę bazy, znak $ oraz nazwę zmiennej: 
> Orange$Tree  # ten zapis daje nam dostęp do zmiennej Tree.'


* POMOC W R:  HELPER *
> help(mean)
> ?sd
 - jeżeli nie znamy dokładnie nazwy funkcji, ale wiemy, jakiej tematyki dotyczy, możemy szukać przy pomocy użycia polecenia help.search lub ??, np.
> help.search("empirical")
> ??density.


* STRUKTURA DANYCH W R 	*
Podstawwoym typem danych jest wektor = uporządkowany ciąg wilekości ( niekoniecznie liczbowych). 
> atan(pi)	+> 	[1] 1.262627

"[1]" widniejąca przed powyższym wnikiem oznacza, że R interpretuje wynik powyższsej operacji jako wektor- indeks pierwszego elementu wektora znajdującego sięw pierwszym wieszu.

exmp:
>1:40
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22
[23] 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40


* WEKTORY - VERTICES *
Funkcja c() umożliwia tworzenie wektora z pojedynczych elementów oraz innych wektorów:
> c(1,5,7,9,12)
> c(5:24, 23, 1:4)

Uwaga:
Składowymi wektora mogą być zarówno liczby, jak i ciągi znaków.
> c(1, 4, 6, "zielony", "niebieski", "biały")


* NAZWY OBIEKTÓW W R, SEKWENCJE *
Każdemu obiektowi w R można przypisać nazwę. Do nadawania nazwy elementom danego obiektu służy funkcja names():
> kolory=c(4,5,24,1)
> names(kolory)=c("zielony", "niebieski", "biały", + "czerwony")
> kolory.

- Sekwencje (ciągi), będące elementami wektora, można tworzyćza pomocą operatora : bądź funkcji seq.
> 30:10
> seq(1,45,by=3)
> c(seq(from=1, by=3, length=15),1:10)

* 	REPLIKACJE 	*
Środowisko R umożliwia replikację, czyli powielanie danych. *Funckja rep(). 1szy argument (najczęśćiej wektor) - to ten który ma zostać powielony. Kolejne (opcjonalne) argumenty to następujące nieujemne liczby całkowite:
 - times = ilość powtórzeń obiektu
 - length.out = długość wektora wynikowego,
 - each= ilość powtórzeń każdego elementu wektora źródłowego.
EXAMPLE:
> rep(5:8,4)		5678567856785678
> rep(5:8,each=4) # inny wynik niż poprzednio. 	5555666677778888
> rep(5:8,length.out=10)	5678567856


* 	ZMIENNE 	*
W środowisku R mamy możliwość definiowania zmiennych i odwoływania się do nich poprzez nazwę. Operatorami za których pomocą przypisujemy do zmiennej określoną wartość to: <- oraz = , analogicznie działa także funkcja assign():
> x<-c(4:10)		==	 x: int [1:7] 4 5 6 7 8 9 10
> y=c("jeden", "dwa")	==	y: chr [1:2] "jeden" "dwa"
> assign("z", c(x,y))	==	z: chr [1:9] "4" "5" "6" "7" "8" "9" "10"

teraz aby wyświetlić wynik przypisania: wywołaj ją poprzez jej nazwę
> x		== [1] 4 5 6 7 8 9 10
> y[2]		== [1] "dwa"
> z[5]		== [1] "8"


*	MACIERZE 	*
Tworzenie macierzy umożliwia funkcja matrix(): -parameters:
- wektor, który inicjuje zawartość macierzy,
- liczba wierzsy,
- liczba kolmn;
EXAMPLE:
 > macierz<-matrix(seq(1:4),3,4) --> takie coś below:
1	4	3	2
2	1	4	3
3	2	1	4

Odwołujemy się tak o:
>macierz[1,3] # element z 1 wiersza i  3 kolumny
>macierz[1,1] # caly pierwzsy wiersz macierzy
>macierz[,3]  # cala trzecia kolumna macierzy


*		TABLICE		*
FUNKCJA array(). : parametry:
-wektor, inicjuje zawartość tablicy:
-wektor, który określa wymiar tablicy:
> tablica1<-array(seq(1:4), c(3,4))
> tablica2<-array(c(1:5),c(2,2,2))

view(tablica1)
1	4	3	2
2	1	4	3
3	2	1	4

Odwołanie do poszczególnych elementów tablicy jest analogiczne
jak w przypadku macierzy:
> tablica1[2,2]
> tablica1[1:2,] # wiersze w tablicy od 1 do 2
> tablica1[,1]
> tablica2[2,2,2]



*	LISTY		*
lista pozwala łączyć obiekty różnych typów. Konstruktorem listy = funkcja list().
EXAMPLE:
> przedmiot<-c("piłka", "skrzynia")
> kolor<-c("czerwony", "zielony")
> waga<-c(2,8)
> lista<-list(przedmiot, kolor, waga)
> names(lista)<-c("przedmiot", "kolor", "waga")

you can refer to the lsit elements using their name or position on list:
> lista[2]
> lista$waga
> lista$waga[which(lista$przedmiot=="piłka")]
< lista$kolor[lista$przedmiot=="skrzynia"]
- the compare operator '==' is very useful there, as it allows us to obtain these elements from list that meet a condition.


* 	RAMKI DANYCH		*
Data frame is a list, that allows us to join vertices of the same length(columnally). It is especially usefull to represent empiprical data( data that comes from experience and observations, x experiments), because of its structure that is same as (odpowiada / suits (the) ) to the table in database.

*	SORTOWANIE DANYCH	 *
Wektor można posortować w kolejności rosnącej bądź malejącej. 
Vertices can be sorted in Ascending or Descending order.
Służy do tego funkcja sort():
>sort(kolory) # default sort in order rosnący =Ascending
>sort(kolory, decreasing = TRUE) # now the order is malejący= Descending.

*	IMPORT DANYCH Z PLIKU		*
importing data from external files is possible in R thanks to read.table() function, that reads file in table format and creates the dataframe on based on that table. Every single observation is corresponding(odpowiada) to the 1line in file, and the variable = is relatable to the column.
Important parameters:	// IMPORTANTE:...